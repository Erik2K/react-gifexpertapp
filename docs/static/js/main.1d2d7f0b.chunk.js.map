{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onKeyUp","e","preventDefault","target","value","type","placeholder","onChange","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"4LAGaA,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAC7B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OACC,sBAAMC,QANc,SAACC,GACrBA,EAAEC,iBACFN,EAAYK,EAAEE,OAAOC,QAIrB,SACC,uBACCC,KAAK,OACLC,YAAY,YACZF,MAAON,EACPS,SAfuB,SAACN,GAC1BF,EAAcE,EAAEE,OAAOC,a,OCLZI,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACxC,OACC,qBAAKC,UAAU,yCAAf,SACC,qBAAKC,IAAKF,EAAKG,IAAKJ,O,uBCLVK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAChBN,EADgB,iDACgCO,UACrDF,GAFqB,gEAIHG,MAAMR,GAJH,cAIhBS,EAJgB,gBAKCA,EAAKC,OALN,uBAKdC,EALc,EAKdA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC9B,MAAO,CACNhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAXd,kBAefY,GAfe,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IACzC,ECF2B,SAACZ,GAC5B,MAA0BnB,mBAAS,CAClCyB,KAAM,GACNO,SAAS,IAFV,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACTjB,EAAQC,GAAUiB,MAAK,SAACC,GAAD,OACtBH,EAAS,CACRT,KAAMY,EACNL,SAAS,SAGT,CAACb,IAEGc,EDb2BK,CADM,EAAfnB,UACXU,EAAd,EAAQJ,KAAcO,EAAtB,EAAsBA,QAEtB,OACC,qCACEA,GACA,mBAAGjB,UAAU,mCAAb,wBAGD,qBAAKA,UAAU,YAAf,SACEc,EAAOF,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aEVd2B,EAAe,WAC3B,MAAgCvC,mBAAS,IAAzC,mBAAOmB,EAAP,KAAiBpB,EAAjB,KAEA,OACC,qCACC,8CACA,cAAC,EAAD,CAAaA,YAAaA,IAE1B,6BACC,cAAC,EAAD,CAAwBoB,SAAUA,GAApBA,S,MCPlBqB,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.1d2d7f0b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategory }) => {\r\n\tconst [inputValue, setInputValue] = useState('');\r\n\r\n\tconst handleInputChange = (e) => {\r\n\t\tsetInputValue(e.target.value);\r\n\t};\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tsetCategory(e.target.value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onKeyUp={handleSubmit}>\r\n\t\t\t<input\r\n\t\t\t\ttype='text'\r\n\t\t\t\tplaceholder='Search...'\r\n\t\t\t\tvalue={inputValue}\r\n\t\t\t\tonChange={handleInputChange}\r\n\t\t\t/>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategories: PropTypes.any.isRequired,\r\n};\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\treturn (\r\n\t\t<div className='card animate__animated animate__fadeIn'>\r\n\t\t\t<img src={url} alt={title} />\r\n\t\t</div>\r\n\t);\r\n};\r\n","export const getGifs = async (category) => {\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n\t\tcategory\r\n\t)}&limit=100&api_key=Fa0yqq9PSLZrol8wWSOLicC459QDbSjr`;\r\n\tconst resp = await fetch(url);\r\n\tconst { data } = await resp.json();\r\n\r\n\tconst gifs = data.map((img) => {\r\n\t\treturn {\r\n\t\t\tid: img.id,\r\n\t\t\ttitle: img.title,\r\n\t\t\turl: img.images?.downsized_medium.url,\r\n\t\t};\r\n\t});\r\n\r\n\treturn gifs;\r\n};\r\n","import React from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\tconst { data: images, loading } = useFetchGifs(category);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{loading && (\r\n\t\t\t\t<p className='animate__animated animate__flash'>Loading...</p>\r\n\t\t\t)}\r\n\r\n\t\t\t<div className='card-grid'>\r\n\t\t\t\t{images.map((img) => (\r\n\t\t\t\t\t<GifGridItem key={img.id} {...img} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\tconst [state, setState] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tgetGifs(category).then((imgs) =>\r\n\t\t\tsetState({\r\n\t\t\t\tdata: imgs,\r\n\t\t\t\tloading: false,\r\n\t\t\t})\r\n\t\t);\r\n\t}, [category]);\r\n\r\n\treturn state;\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\tconst [category, setCategory] = useState('');\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2>GifExpertApp</h2>\r\n\t\t\t<AddCategory setCategory={setCategory} />\r\n\r\n\t\t\t<ol>\r\n\t\t\t\t<GifGrid key={category} category={category} />\r\n\t\t\t</ol>\r\n\t\t</>\r\n\t);\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}